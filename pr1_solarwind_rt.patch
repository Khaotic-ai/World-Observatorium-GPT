From 1111111111111111111111111111111111111111 Mon Sep 17 00:00:00 2001
From: World Observatorium Bot <noreply@example.com>
Date: Wed, 22 Oct 2025 22:08:27 +0000
Subject: [PATCH 1/2] PR-1: Add SWPC adapters and /solarwind/rt endpoint

---
 orchestrator/adapters/swpc.py | 146 ++++++++++++++++++++++++++++++++++++++++++
 orchestrator/app.py           |  41 ++++++++++++
 specs/observatorium.additions.yaml |  46 +++++++++++++
 3 files changed, 233 insertions(+)
 create mode 100644 orchestrator/adapters/swpc.py
 create mode 100644 specs/observatorium.additions.yaml

diff --git a/orchestrator/adapters/swpc.py b/orchestrator/adapters/swpc.py
new file mode 100644
index 0000000..aaaaaaa
--- /dev/null
+++ b/orchestrator/adapters/swpc.py
@@ -0,0 +1,146 @@
+from __future__ import annotations
+import pandas as pd, requests
+from dateutil import parser as dparser
+
+def _resample10(df: pd.DataFrame) -> pd.DataFrame:
+    return (df.sort_index()
+              .resample("10min").mean()
+              .interpolate(limit=3))
+
+def fetch_kp_1m(hours: int = 48) -> pd.DataFrame:
+    url = "https://services.swpc.noaa.gov/json/planetary_k_index_1m.json"
+    js = requests.get(url, timeout=20).json()
+    df = pd.DataFrame(js)
+    if "time_tag" in df: df["time"] = pd.to_datetime(df["time_tag"])
+    else:                 df["time"] = pd.to_datetime(df.iloc[:,0])
+    if "kp_index" in df: df["kp"] = pd.to_numeric(df["kp_index"], errors="coerce")
+    elif "estimated_kp" in df: df["kp"] = pd.to_numeric(df["estimated_kp"], errors="coerce")
+    else: df["kp"] = pd.NA
+    df = df[["time","kp"]].dropna().set_index("time").sort_index()
+    return _resample10(df.last(f"{{hours}}h"))
+
+def fetch_dscovr_plasma(hours: int = 48) -> pd.DataFrame:
+    url = "https://services.swpc.noaa.gov/products/solar-wind/plasma-1-day.json"
+    js = requests.get(url, timeout=20).json()
+    cols = js[0]; df = pd.DataFrame(js[1:], columns=cols)
+    df["time"] = pd.to_datetime(df["time_tag"])
+    for c in ("density","speed","temperature"): df[c] = pd.to_numeric(df[c], errors="coerce")
+    df = df.set_index("time")[["density","speed","temperature"]].dropna().sort_index()
+    df = df.rename(columns={"speed":"solar_wind_speed"})
+    return _resample10(df.last(f"{{hours}}h"))
+
+def fetch_dscovr_mag(hours: int = 48) -> pd.DataFrame:
+    url = "https://services.swpc.noaa.gov/products/solar-wind/mag-6-hour.json"
+    js = requests.get(url, timeout=20).json()
+    cols = js[0]; df = pd.DataFrame(js[1:], columns=cols)
+    df["time"] = pd.to_datetime(df["time_tag"])
+    for c in ("bx_gsm","by_gsm","bz_gsm","bt"): df[c] = pd.to_numeric(df[c], errors="coerce")
+    df = df.set_index("time")[["bx_gsm","by_gsm","bz_gsm","bt"]].dropna().sort_index()
+    return _resample10(df.last(f"{{hours}}h"))
+
+def fetch_goes_protons(hours: int = 48) -> pd.DataFrame:
+    url = "https://services.swpc.noaa.gov/json/goes/primary/integral-protons-plot-1-day.json"
+    js = requests.get(url, timeout=20).json()
+    rows = []
+    for r in js:
+        if r.get("energy") == ">=10 MeV":
+            rows.append((dparser.parse(r["time_tag"]), float(r["flux"])))
+    df = pd.DataFrame(rows, columns=["time","proton_pfu"]).set_index("time").sort_index()
+    return _resample10(df.last(f"{{hours}}h"))
+
+def bundle(hours: int = 48) -> pd.DataFrame:
+    kp = fetch_kp_1m(hours)
+    mag = fetch_dscovr_mag(hours)
+    plasma = fetch_dscovr_plasma(hours)
+    pfu = fetch_goes_protons(hours)
+    return pd.concat([kp, mag, plasma, pfu], axis=1).sort_index()
diff --git a/orchestrator/app.py b/orchestrator/app.py
index bbbbbbb..ccccccc 100644
--- a/orchestrator/app.py
+++ b/orchestrator/app.py
@@ -1,3 +1,4 @@
+from orchestrator.adapters import swpc
@@ -120,3 +121,42 @@
-    return {
+    return {
         "ok": status != "error",
         "status": status,
         "fetchedAt": fetched_at,
         "missingDomains": missing,
         "time": time_data,
         "weather": weather,
         "quakes": quakes,
         "solar": solar,
         "ligo": ligo_events
     }
+
+# --- Appended routes (Phase 3.2) ---
+@app.get("/solarwind/rt")
+def get_solarwind_rt(hours: int = 48):
+    """Real-time solar wind (10-min)"""
+    df = swpc.bundle(hours=hours)
+    return {
+        "ok": True,
+        "hours": hours,
+        "count": len(df),
+        "time": [t.isoformat() for t in df.index.to_pydatetime()],
+        "kp": df["kp"].tolist() if "kp" in df else [],
+        "bz_gsm": df["bz_gsm"].tolist() if "bz_gsm" in df else [],
+        "bt": df["bt"].tolist() if "bt" in df else [],
+        "solar_wind_speed": df["solar_wind_speed"].tolist() if "solar_wind_speed" in df else [],
+        "density": df["density"].tolist() if "density" in df else [],
+        "temperature": df["temperature"].tolist() if "temperature" in df else [],
+        "proton_pfu": df["proton_pfu"].tolist() if "proton_pfu" in df else []
+    }
diff --git a/specs/observatorium.additions.yaml b/specs/observatorium.additions.yaml
new file mode 100644
index 0000000..ddddddd
--- /dev/null
+++ b/specs/observatorium.additions.yaml
@@ -0,0 +1,46 @@
+paths:
+  /solarwind/rt:
+    get:
+      summary: Realtime solar wind, geomagnetic, and proton flux bundle
+      parameters:
+        - in: query
+          name: hours
+          schema: {{ type: integer, minimum: 1, maximum: 72, default: 48 }}
+      responses:
+        "200":
+          description: OK
+          content:
+            application/json:
+              schema:
+                type: object
+                properties:
+                  ok: {{ type: boolean }}
+                  hours: {{ type: integer }}
+                  time: {{ type: array, items: {{ type: string, format: date-time }} }}
+                  kp: {{ type: array, items: {{ type: number }} }}
+                  bz_gsm: {{ type: array, items: {{ type: number }} }}
+                  bt: {{ type: array, items: {{ type: number }} }}
+                  solar_wind_speed: {{ type: array, items: {{ type: number }} }}
+                  density: {{ type: array, items: {{ type: number }} }}
+                  temperature: {{ type: array, items: {{ type: number }} }}
+                  proton_pfu: {{ type: array, items: {{ type: number }} }}
-- 
2.42.0
